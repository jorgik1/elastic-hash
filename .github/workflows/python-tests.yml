name: Python Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  lint-and-format:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort
    - name: Lint with flake8
      continue-on-error: true
      run: |
        flake8 elastic_hash tests examples --count --select=E9,F63,F7,F82 --show-source --statistics
        # The following is more permissive and will not fail the build
        flake8 elastic_hash tests examples --count --exit-zero --max-complexity=10 --max-line-length=100 --statistics
    - name: Check code formatting
      id: check-formatting
      continue-on-error: true
      run: |
        black --check --diff elastic_hash tests examples || echo "Formatting issues found. Run './run_format.sh' locally."
        isort --check --diff elastic_hash tests examples || echo "Import sorting issues found. Run './run_format.sh' locally."
        echo "Please run './run_format.sh' locally and commit the changes if formatting issues are found."

  test:
    needs: lint-and-format
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11"]

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev,plot]"
    - name: Run tests
      run: |
        pytest
    - name: Run benchmark (quick version)
      run: |
        python examples/benchmark.py

  publish:
    needs: [lint-and-format, test]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    - name: Build and publish
      env:
        TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
        TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
      run: |
        python -m build
        twine upload dist/*
